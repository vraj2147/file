package com.processingcentre;

import java.io.*;
import java.net.*;
import jakarta.jms.*;
import org.apache.activemq.ActiveMQConnectionFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ProcessingCentreServer {
    private static final Logger logger = LoggerFactory.getLogger(ProcessingCentreServer.class);

    private static final int SERVER_PORT = 9999;
    private static final String ACTIVEMQ_URL = "tcp://localhost:61616";
    private static final String QUEUE_NAME = "PublishedStoriesQueue";

    public static void main(String[] args) {
        try (ServerSocket serverSocket = new ServerSocket(SERVER_PORT)) {
            logger.info("Processing Centre Server is running and listening on port {}", SERVER_PORT);

            Connection connection = createConnection();
            Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
            MessageProducer producer = createMessageProducer(session);

            try {
                while (true) {
                    Socket clientSocket = serverSocket.accept();
                    logger.info("Editor Server connected: {}", clientSocket);

                    Thread clientThread = new Thread(() -> handleEditorServerConnection(clientSocket, session, producer));
                    clientThread.start();
                }
            } finally {
                connection.close();
                logger.info("ActiveMQ connection closed");
            }
        } catch (IOException | JMSException e) {
            logger.error("An error occurred", e);
        }
    }

    private static void handleEditorServerConnection(Socket clientSocket, Session session, MessageProducer producer) {
        try (BufferedReader reader = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()))) {
            String story;
            while ((story = reader.readLine()) != null) {
                logger.info("Received story from Editor Server: {}", story);
                // Store the received story in a data structure or database
                publishStory(session, producer, story);
            }
            logger.info("Editor Server disconnected: {}", clientSocket);
        } catch (IOException e) {
            logger.error("An error occurred while handling Editor Server connection", e);
        } catch (JMSException e) {
            logger.error("An error occurred while publishing story", e);
        } finally {
            try {
                clientSocket.close();
                logger.info("Client socket closed");
            } catch (IOException e) {
                logger.error("An error occurred while closing client socket", e);
            }
        }
    }

    private static Connection createConnection() throws JMSException {
        // Create a connection factory
        ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(ACTIVEMQ_URL);

        // Create a connection
        Connection connection = connectionFactory.createConnection();

        // Start the connection
        connection.start();

        logger.info("ActiveMQ connection established");
        return connection;
    }

    private static MessageProducer createMessageProducer(Session session) throws JMSException {
        // Create a destination representing the queue
        Destination destination = session.createQueue(QUEUE_NAME);

        // Create a message producer
        MessageProducer producer = session.createProducer(destination);

        logger.info("MessageProducer created for queue: {}", QUEUE_NAME);
        return producer;
    }

    private static void publishStory(Session session, MessageProducer producer, String storyDetails) throws JMSException {
        // Create a text message with the story details
        TextMessage message = session.createTextMessage(storyDetails);

        // Send the message to the queue
        producer.send(message);

        logger.info("Published story: {}", storyDetails);
    }
}
